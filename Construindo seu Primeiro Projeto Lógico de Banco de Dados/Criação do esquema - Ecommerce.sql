-- criação do banco de dados para o cenário E-commerce.
/*
USE MASTER
GO
DROP DATABASE ECOMMERCE
*/
CREATE DATABASE ECOMMERCE;
GO
USE ECOMMERCE

-- criar tabela cliente
CREATE TABLE CLIENTS (
	IDCLIENT INT IDENTITY(1,1) PRIMARY KEY,
    FNAME VARCHAR(10),
    MINIT VARCHAR(3),
    LNAME VARCHAR(20),
    CPF CHAR(11),
    CNPJ CHAR(15),
    ADDRESS VARCHAR(255),
    CONSTRAINT UNIQUE_CLIENT_CPF_CNPJ UNIQUE (CNPJ, CPF)   
);

-- criar tabela produto
CREATE TABLE PRODUCT (
	IDPRODUCT INT IDENTITY(1,1) PRIMARY KEY,
    PNAME VARCHAR(255),
    CLASSIFICATION_KIDS BIT,
    CATEGORY VARCHAR(15),
    EVALUATION FLOAT,
    SIZE VARCHAR(10),
	CONSTRAINT CHK_CATEGORY_PRODUCT CHECK (CATEGORY IN('Eletrônico','Vestimenta', 'Brinquedo', 'Alimento', 'Mobília'))
);

-- criar tabela cartão de pagamento
CREATE TABLE CARDPAYMENT (
	IDCARDPAYMENT INT IDENTITY(1,1) PRIMARY KEY,
    CARDNUMBER VARCHAR(17) NOT NULL,
    EXPIRATIONDATE DATE NOT NULL,
	CARDNAME VARCHAR(45) NOT NULL,
	CPF CHAR(9) NOT NULL
);

-- criar tabela de pagamentos
CREATE TABLE PAYMENT (
	IDCLIENT INT,
    IDPAYMENT INT IDENTITY(1,1),
	IDCARDPAYMENT INT,
    TYPEPAYMENT VARCHAR(15),
    LIMITAVAILABLE FLOAT,
    CONSTRAINT PK_PAYMENT PRIMARY KEY (IDCLIENT, IDPAYMENT),
	CONSTRAINT FK_PAYMENT_CARDPAYMENT FOREIGN KEY (IDCARDPAYMENT) REFERENCES CARDPAYMENT (IDCARDPAYMENT),
	CONSTRAINT CHK_TYPEPAYMENT_PAYMENT CHECK (TYPEPAYMENT IN('Boleto', 'Cartão','Dois Cartões'))
);


-- criar tabela pedido
CREATE TABLE ORDERS (
	IDORDER INT IDENTITY(1,1) PRIMARY KEY,
    IDORDERCLIENT INT,
    ORDERSTATUS VARCHAR(20) DEFAULT 'Em Processamento',
    ORDERDESCRIPTION VARCHAR(255),
    SENTVALUE FLOAT DEFAULT 10,
    PAYMENTCASH BIT DEFAULT 0,
    IDPAYMENT INT,
    CONSTRAINT FK_ORDERS_CLIENT FOREIGN KEY (IDORDERCLIENT) REFERENCES CLIENTS (IDCLIENT)
	ON UPDATE CASCADE
	ON DELETE SET NULL,
	CONSTRAINT CHK_ORDERSTATUS_ORDERS CHECK (ORDERSTATUS IN('Cancelado','Confirmado','Em Processamento'))
);

-- criar tabela estoque
CREATE TABLE PRODUCTSTORAGE (
	IDPRODSTORAGE INT IDENTITY(1,1) PRIMARY KEY,
    STORAGELOCATION VARCHAR(45),
    QUANTITY INT DEFAULT 0
);

-- criar tabela fornecedor
CREATE TABLE SUPPLIER (
	IDSUPPLIER INT IDENTITY(1,1) PRIMARY KEY,
    SOCIALNAME VARCHAR(45) NOT NULL,
    CNPJ CHAR(15) NOT NULL,
    CONTACT CHAR(10) NOT NULL,
    CONSTRAINT UNIQUE_SUPPLIER UNIQUE (CNPJ)
);

-- criar tabela vendedor
CREATE TABLE SELLER (
	IDSELLER INT IDENTITY(1,1) PRIMARY KEY,
    SOCIALNAME VARCHAR(45) NOT NULL,
    ABSNAME VARCHAR(255),
    CNPJ CHAR(15),
    CPF CHAR(9),
    LOCATION VARCHAR(255),
    CONTACT CHAR(10) NOT NULL,
    CONSTRAINT UNIQUE_CNPJ_CPF_SUPPLIER UNIQUE (CNPJ, CPF)
);

-- criar tabela produto por vendedor
CREATE TABLE PRODUCTSELLER (
	IDPSELLER INT,
    IDPPRODUCT INT,
	PRODQUANTITY INT DEFAULT 1,
    CONSTRAINT PK_PRODUCTSELLER PRIMARY KEY (IDPSELLER, IDPPRODUCT),
    CONSTRAINT FK_PRODUCT_SELLER FOREIGN KEY (IDPSELLER) REFERENCES SELLER (IDSELLER),    
    CONSTRAINT FK_PRODUCT_PRODUCT FOREIGN KEY (IDPPRODUCT) REFERENCES PRODUCT (IDPRODUCT)
);

-- criar tabela de relação de produto e pedido
CREATE TABLE PRODUCTORDER (
	IDPOPRODUCT INT,
    IDPOORDER INT,
	POQUANTITY INT DEFAULT 1,
    POSTATUS VARCHAR(20) DEFAULT 'Disponível',
    CONSTRAINT PK_PRODUCTORDER PRIMARY KEY (IDPOPRODUCT, IDPOORDER),
    CONSTRAINT FK_PRODUCTORDER_SELLER FOREIGN KEY (IDPOPRODUCT) REFERENCES PRODUCT (IDPRODUCT),    
    CONSTRAINT FK_PRODUCTORDER_PRODUCT FOREIGN KEY (IDPOORDER) REFERENCES ORDERS (IDORDER),
	CONSTRAINT CHK_POSTATUS_PRODUCTORDER CHECK (POSTATUS IN('Disponível','Sem estoque'))
);

-- criar tabela de relação de produto e estoque
CREATE TABLE STORAGELOCATION (
	IDLPRODUCT  INT,
    IDLSTORAGE INT,
	LOCATION VARCHAR(255) NOT NULL,
    CONSTRAINT PK_STORAGE_LOCATION PRIMARY KEY (IDLPRODUCT, IDLSTORAGE),
    CONSTRAINT FK_STORAGE_LOCATION_PRODUCT FOREIGN KEY (IDLPRODUCT) REFERENCES PRODUCT (IDPRODUCT),    
    CONSTRAINT FK_STORAGE_LOCATION_STORAGE FOREIGN KEY (IDLSTORAGE) REFERENCES PRODUCTSTORAGE (IDPRODSTORAGE)
);

-- criar tabela de relação disponibilizando um produto
CREATE TABLE PRODUCTSUPPLIER (
	IDPSSUPPLIER INT,
    IDPSPRODUCT INT,
	QUANTITY INT DEFAULT 1,
    CONSTRAINT PK_PRODUCTSUPPLIER PRIMARY KEY (IDPSSUPPLIER, IDPSPRODUCT),
    CONSTRAINT FK_PRODUCTSUPPLIER_SUPPLIER FOREIGN KEY (IDPSSUPPLIER) REFERENCES SUPPLIER (IDSUPPLIER),    
    CONSTRAINT FK_PRODUCTSUPPLIER_PRODUCT FOREIGN KEY (IDPSPRODUCT) REFERENCES PRODUCT (IDPRODUCT)
);


-- criar tabela de entrega
CREATE TABLE DELIVERY (
	IDDELIVERY INT PRIMARY KEY IDENTITY(1,1),
	IDDORDER INT,
	DELIVERYDATE DATE NOT NULL,
	DELIVERYSTATUS VARCHAR(45) NOT NULL DEFAULT 'Gerado Remessa',
	TRACKINGCODE VARCHAR(45) NOT NULL,
	CONSTRAINT FK_DELIVERY_ORDER FOREIGN KEY (IDDORDER) REFERENCES ORDERS (IDORDER),	
	CONSTRAINT CHK_DELIVERY CHECK (DELIVERYSTATUS IN('Gerado Remessa', 'Em Rota', 'A Caminho', 'Entregue'))
	
)